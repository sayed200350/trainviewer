# BahnBlitz - Production Docker Compose
# For production deployments with optimizations

version: '3.8'

services:
  # ================================
  # Backend API (Production)
  # ================================
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: production
    container_name: bahnblitz-backend-prod
    restart: unless-stopped
    ports:
      - "3001:3001"
    environment:
      - NODE_ENV=production
      - PORT=3001
    env_file:
      - ./backend/.env
    depends_on:
      - mongodb
    networks:
      - bahnblitz-prod-network
    volumes:
      - ./backend/uploads:/app/uploads
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M

  # ================================
  # Frontend Website (Production)
  # ================================
  website:
    build:
      context: ./website
      dockerfile: Dockerfile
    container_name: bahnblitz-website-prod
    restart: unless-stopped
    ports:
      - "8080:8080"
    environment:
      - NODE_ENV=production
    depends_on:
      - backend
    networks:
      - bahnblitz-prod-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M

  # ================================
  # MongoDB (Production)
  # ================================
  mongodb:
    image: mongo:6.0
    container_name: bahnblitz-mongodb-prod
    restart: unless-stopped
    ports:
      - "27017:27017"
    environment:
      - MONGO_INITDB_DATABASE=bahnblitz-prod
      - MONGO_INITDB_ROOT_USERNAME=${MONGO_ROOT_USERNAME:-admin}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGO_ROOT_PASSWORD:-password}
    volumes:
      - mongodb_prod_data:/data/db
      - ./docker/mongo-init:/docker-entrypoint-initdb.d
      - ./docker/mongo-backup:/backup
    networks:
      - bahnblitz-prod-network
    command: --auth --bind_ip_all
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 5s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M

  # ================================
  # Redis Cache (Production)
  # ================================
  redis:
    image: redis:7-alpine
    container_name: bahnblitz-redis-prod
    restart: unless-stopped
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-bahnblitz}
    volumes:
      - redis_prod_data:/data
    networks:
      - bahnblitz-prod-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '0.25'
          memory: 128M
        reservations:
          cpus: '0.1'
          memory: 64M

  # ================================
  # Nginx Load Balancer (Optional)
  # ================================
  nginx-lb:
    image: nginx:alpine
    container_name: bahnblitz-nginx-lb
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/lb.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - backend
      - website
    networks:
      - bahnblitz-prod-network
    deploy:
      resources:
        limits:
          cpus: '0.25'
          memory: 128M
        reservations:
          cpus: '0.1'
          memory: 64M

# ================================
# Networks
# ================================
networks:
  bahnblitz-prod-network:
    driver: bridge
    driver_opts:
      com.docker.network.bridge.name: br-bahnblitz-prod

# ================================
# Volumes
# ================================
volumes:
  mongodb_prod_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/mongodb
  redis_prod_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/redis

# ================================
# Global Configuration
# ================================
x-logging:
  &default-logging
  driver: json-file
  options:
    max-size: "10m"
    max-file: "3"

# Apply logging to all services
services:
  backend:
    logging: *default-logging
  website:
    logging: *default-logging
  mongodb:
    logging: *default-logging
  redis:
    logging: *default-logging
